name: Build, Lint, Release APK, and Deploy Web

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  # Build Job
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter Version Management CLI
        uses: flutter-actions/setup-fvm@v1

      - name: Install Flutter SDK
        run: echo yes | fvm use 3.22.2

      # Caching pub dependencies to speed up build times
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .flutter-plugins
            .flutter-plugins-dependencies
            build
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.yaml') }}

      - name: Install dependencies
        run: fvm flutter pub get

      - name: Run Linter
        run: fvm flutter analyze

      - name: Build APK
        run: fvm flutter build apk --release

      # Only upload APK artifact if build is on the main branch or a tag is pushed
      - name: Upload APK as artifact
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: app-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Build Web
        run: fvm flutter build web --release

      # Upload Web build artifacts for deployment later
      - name: Upload Web Build as artifact
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: web-build
          path: build/web

  # Release Job for APK
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4  # Updated to v4
        with:
          name: app-release.apk

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automated release for ${{ github.ref }}.
          draft: false
          prerelease: false

      - name: Upload APK to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

